version: '3.8'

x-airflow-common: &airflow-common
  build: './dockerfiles/airflow'
  image: ${AIRFLOW_IMAGE_NAME:-extending_airflow:latest}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${PG_USER:-postgres}:${PG_PASSWORD:-postgres}@postgres/${PG_DATABASE:-mlflow_db}
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${PG_USER:-postgres}:${PG_PASSWORD:-postgres}@postgres/${PG_DATABASE:-mlflow_db}
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
    AIRFLOW__SECRETS__BACKEND: airflow.secrets.local_filesystem.LocalFilesystemBackend
    AIRFLOW__SECRETS__BACKEND_KWARGS: '{"variables_file_path": "/opt/secrets/variables.yaml", "connections_file_path": "/opt/secrets/connections.yaml"}'
    AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY:-minio}
    AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_ACCESS_KEY:-minio123}
    AWS_ENDPOINT_URL_S3: http://s3:9000
    MLFLOW_S3_ENDPOINT_URL: http://s3:9000
  volumes:
    - ${AIRFLOW_PROJ_DIR:-./airflow}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-./airflow}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-./airflow}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-./airflow}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-./airflow}/secrets:/opt/secrets
  networks:
    - backend

services:
  # PostgreSQL service for storing MLflow metadata and Airflow metadata
  postgres:
    restart: always
    image: postgres
    container_name: postgres
    ports:
      - "${PG_PORT:-5432}:5432"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-postgres}
      - POSTGRES_HOST=postgres  # Internal Docker hostname for PostgreSQL
      - POSTGRES_DB=${PG_DATABASE:-mlflow_db}
      - POSTGRES_PORT=${PG_PORT:-5432}
    volumes:
      - db_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL data
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "5432", "-U", "${PG_USER:-postgres}"]
      interval: 60s
      timeout: 20s
      retries: 3

  # MinIO service for S3-compatible storage
  s3:
    restart: always
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_PORT_UI:-9001}:9001"
    networks:
      - backend
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minio}  # Access key for MinIO
      - MINIO_SECRET_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}  # Secret key for MinIO
    volumes:
      - minio_data:/data  # Persistent storage for MinIO data
    command: server /data --console-address :9001  # Start MinIO with admin console on port 9001
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 60s
      timeout: 20s
      retries: 3

  # Service to initialize MinIO buckets
  create_s3_buckets:
    image: minio/mc:latest
    container_name: minio_create_bucket
    depends_on:
      - s3  # Ensure MinIO is ready before creating buckets
    networks:
      - backend
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:9000 ${MINIO_ACCESS_KEY:-minio} ${MINIO_SECRET_ACCESS_KEY:-minio123} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${MLFLOW_BUCKET_NAME:-mlflow}`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME:-mlflow};
      /usr/bin/mc policy set download s3/${MLFLOW_BUCKET_NAME:-mlflow};
      exit 0;
      '

  # MLflow service
  mlflow:
    restart: always
    build: "./dockerfiles/mlflow"  # Build the MLflow image from the specified Dockerfile
    image: mlflow
    container_name: mlflow
    depends_on:
      postgres:
        condition: service_healthy  # Ensure PostgreSQL is healthy before starting MLflow
      create_s3_buckets:
        condition: service_completed_successfully  # Ensure MinIO buckets are created before starting MLflow
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    networks:
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minio}  # MinIO access key for MLflow
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}  # MinIO secret key for MLflow
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000  # Endpoint URL for S3 (MinIO)
      - BACKEND_STORE_URI=postgresql://${PG_USER:-postgres}:${PG_PASSWORD:-postgres}@postgres:5432/${PG_DATABASE:-mlflow_db}  # URI for PostgreSQL
      - ARTIFACT_ROOT=s3://${MLFLOW_BUCKET_NAME:-mlflow}/  # Root path for storing MLflow artifacts in S3 (MinIO)
    command: >
      mlflow server 
      --backend-store-uri ${BACKEND_STORE_URI} 
      --default-artifact-root ${ARTIFACT_ROOT} 
      --host 0.0.0.0
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://mlflow:5000 || exit 1  # Check if MLflow server is reachable
      interval: 60s
      timeout: 10s
      retries: 3

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "${AIRFLOW_PORT:-8080}:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # Airflow Initialization
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./airflow}:/sources

networks:
  backend:
    driver: bridge

volumes:
  db_data:
  minio_data:
